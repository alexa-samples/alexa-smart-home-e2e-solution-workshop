// Copyright Amazon.com, Inc. and its affiliates. All Rights Reserved.

// SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0

// Licensed under the Amazon Software License (the "License").
// You may not use this file except in compliance with the License.
// A copy of the License is located at

//   http://aws.amazon.com/asl/

// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

/*
 ************ Lambda Layer description *************
 *
 * This lambda layer exposes the APIs to get and update things information from
 * AWS IoT things registry.
 *
 */

const iotThings = require('./low-level.js')

/* Exports the API to retrieve a list of all the things
 * Returns an array of things with following details for each thing:
 *  -- serialNumber
 *  -- friendlyName (device name)
 *  -- thingTypeName (device type)
 *  -- status (power status)
 *  -- battery (battery level)
 */
exports.getDevices = async (username) => {
  console.log('Lambda layer: getting devices')
  const devices = []
  const things = await iotThings.getListOfThings('ID', username)
  for (let i = 0; i < things.things.length; i++) {
    const temp = await iotThings.getThingDetails(things.things[i].thingName)
    const thingDetails = JSON.parse(temp.payload)
    thingDetails.state.reported.serialNumber = things.things[i].attributes.serialNumber
    //  thingDetails.state.reported["thingTypeName"]=things.things[i].thingTypeName;
    thingDetails.state.reported.thingTypeName = 'Sensor'
    devices.push(thingDetails.state.reported)
  }
  return (devices)
}

/* Exports the API to get things info
 * Returns details about the thing along with following thing attributes
 *  -- serialNumber
 *  -- userID
 */
exports.getDeviceInfo = async (thingName) => {
  console.log('Lambda layer: getting device info')
  try {
    const things = await iotThings.describeThings(thingName)
    return (things)
  } catch (err) {
    return (false)
  }
}

/* Exports the API to retrieve details about a thing.
 * Returns the following details:
 *  -- serialNumber
 *  -- friendlyName (device name)
 *  -- thingTypeName (device type)
 *  -- status (power status)
 *  -- battery (battery level)
 */
exports.getDevice = async (serialNumber) => {
  console.log('Inside get device')
  const things = await iotThings.getListOfThings('serial', serialNumber)
  const temp = await iotThings.getThingDetails(things.things[0].thingName)
  const thingDetails = JSON.parse(temp.payload)
  thingDetails.state.reported.serialNumber = things.things[0].attributes.serialNumber
  //  thingDetails.state.reported["thingTypeName"]=things.things[0].thingTypeName;
  thingDetails.state.reported.thingTypeName = 'Sensor'
  return (thingDetails.state.reported)
}

/* Exports the API to assign a thing to a userID
 * If the device is successfully added, it returns with device details else retuns false
 */
exports.addDevice = async (username, serialNumber, deviceName) => {
  const things = await iotThings.getListOfThings('serial', serialNumber)
  console.log(JSON.stringify(things))
  if (!things.things[0].attributes.userID) {
    await iotThings.updateAttributes(username, things.things[0].thingName)
    await iotThings.updateName(things.things[0].thingName, deviceName)
    const temp = await iotThings.getThingDetails(things.things[0].thingName)
    console.log(temp)
    const thingDetails = JSON.parse(temp.payload)
    thingDetails.state.reported.serialNumber = things.things[0].attributes.serialNumber
    console.log(thingDetails.state.reported)
    return (thingDetails.state.reported)
  } else {
    return (false)
  }
}

/* Exports the API to update the device power status
 * On success returns the updated device status else false
 */
exports.updateDevice = async (username, serialNumber, state) => {
  const things = await iotThings.getListOfThings('serial', serialNumber)
  if (things.things[0].attributes.userID && things.things[0].attributes.userID === username) {
    const temp = await iotThings.updateStatus(things.things[0].thingName, state)
    const thingDetails = JSON.parse(temp.payload)
    return (thingDetails.state.desired)
  } else {
    return (false)
  }
}

/* Exports the API to update the device name
 * On success returns the updated device name else false
 */
exports.updateDeviceName = async (username, serialNumber, deviceName) => {
  const things = await iotThings.getListOfThings('serial', serialNumber)
  if (things.things[0].attributes.userID && things.things[0].attributes.userID === username) {
    const thingInfo = await iotThings.updateName(things.things[0].thingName, deviceName)
    const thingDetails = JSON.parse(thingInfo.payload)
    return (thingDetails.state.desired)
  } else {
    return (false)
  }
}

/* Exports the API to retrieve details about a thing and validates the user ID.
 * Returns the following details:
 *  -- serialNumber
 *  -- friendlyName (device name)
 *  -- thingTypeName (device type)
 *  -- status (power status)
 *  -- battery (battery level)
 */
exports.getStatus = async (username, serialNumber) => {
  const things = await iotThings.getListOfThings('serial', serialNumber)
  if (things.things[0].attributes.userID && things.things[0].attributes.userID === username) {
    const thingDetails = await iotThings.getThingDetails(things.things[0].thingName)
    const thingInfo = JSON.parse(thingDetails.payload)
    thingInfo.state.reported.serialNumber = things.things[0].attributes.serialNumber
    return (thingInfo.state.reported)
  } else {
    return (false)
  }
}

/* Exports the API to remove user's association with the thing */
exports.removeDevice = async (serialNumber) => {
  const things = await iotThings.getListOfThings('serial', serialNumber)
  await iotThings.updateAttributes('', things.things[0].thingName)
  await iotThings.updateName(things.things[0].thingName, '')
  return (true)
}
