// Copyright Amazon.com, Inc. and its affiliates. All Rights Reserved.

// SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0

// Licensed under the Amazon Software License (the "License").
// You may not use this file except in compliance with the License.
// A copy of the License is located at

//   http://aws.amazon.com/asl/

// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

/*
 ************ Lambda Layer description *************
 *
 * This lambda layer handles the low-level functions required to interface
 * with the AWS IoT Registry.
 *
 */

const AWS = require('aws-sdk')

const iotdata = new AWS.IotData({
  endpoint: process.env.MQTT_BROKER_ENDPOINT
})

const iot = new AWS.Iot({
  region: process.env.REGION,
  endpoint: `iot.${process.env.REGION}.amazonaws.com`
})

exports.describeThings = (thingName) => {
  return new Promise((resolve, reject) => {
    const params = {
      thingName: thingName
    }

    iot.describeThing(params, function (err, data) {
      if (err) {
        reject(err)
      } else {
        resolve(data)
      }
    })
  })
}

exports.getThingDetails = (thingName) => {
  return new Promise((resolve, reject) => {
    const params = {
      thingName: thingName
    }

    iotdata.getThingShadow(params, (err, data) => {
      if (err) {
        reject(err)
      } else {
        resolve(data)
      }
    })
  })
}

exports.getListOfThings = (att, id) => {
  return new Promise((resolve, reject) => {
    const params = {
      attributeName: att === 'ID' ? 'userID' : 'serialNumber',
      attributeValue: id
    }

    iot.listThings(params, function (err, data) {
      if (err) {
        console.log('get list of things: ', err)
        reject(err)
      } else {
        resolve(data)
      }
    })
  })
}

exports.updateAttributes = (userID, thingName) => {
  return new Promise((resolve, reject) => {
    const params = {
      thingName: thingName,
      attributePayload: {
        attributes: {
          userID: userID
        },
        merge: true
      }
    }

    iot.updateThing(params, function (err, data) {
      if (err) {
        console.log(err, err.stack) // an error occurred
        reject(err)
      } else {
        console.log(data) // successful response
        resolve(data)
      }
    })
  })
}

exports.updateStatus = (thingName, state) => {
  console.log(`Inside update status - low level:  ${thingName}, ${state}`)
  return new Promise((resolve, reject) => {
    const params = {
      payload: `{"state":{"desired":{"status":"${state}"}}}`,
      thingName: thingName
    }

    iotdata.updateThingShadow(params, (err, data) => {
      if (err) {
        console.log(err, err.stack)
        reject(err)
      } else {
        resolve(data)
      }
    })
  })
}

exports.updateName = (thingName, value) => {
  return new Promise((resolve, reject) => {
    const params = {
      payload: `{"state":{"desired":{"friendlyName":"${value}"}}}`,
      thingName: thingName
    }

    iotdata.updateThingShadow(params, (err, data) => {
      if (err) {
        console.log(err, err.stack)
        reject(err)
      } else {
        resolve(data)
      }
    })
  })
}
